extends ./admin/main.jade

block prepend variables
	- title = "Dashboard"
	- subtitle = "Control Panel"
	- user = {name:"Christopher Little"}
	- breadcrumb = [{name:"Dashboard"}]
	- sidebarItems = [{link:"#", name:title, icon:"dashboard", selected:true}, {link:"#", name:"Widgets", icon:"th"}]
	// notifications will normally come from the javascript context
	- notifications = notifications || []

block content
	.row(ng-app="mabel.admin")
		.col-md-12
			include admin/boxes/event-settings.jade

block append scripts
	script(type="text/javascript").
		$(function () {
			$('#event-close-field').datetimepicker();
		});
	script(type = "text/javascript").
		angular.module('mabel.admin', []);

		angular.module('mabel.admin').directive('datetimepicker', DateTimePickerDirective);
		angular.module('mabel.admin').controller("EventSettingsController", EventSettingsController);

		function EventSettingsController() {
			var vm = this;
			vm.eventName = "Emmanuel College May Ball";
			vm.eventLaunchDate = new moment("1993/8/12 13:05");
			vm.eventCloseDate = vm.eventLaunchDate.add(2, 'M');
		}
		
		function DateTimePickerDirective($timeout) {
			return {
				scope: {
					date: "="
				},
				restrict: 'A',
				link: function(scope, element, attrs) {

					element.datetimepicker({
						defaultDate: scope.date
					});
					element.on('dp.change', updateModel).on('dp.error', validateError);
					scope.$watch('date', updatePicker);

					function updateModel(e) {
						scope.$apply(function() {
							scope.date = e.date;
						});
					}
					function validateError(e) {
						console.error("Error parsing.",e.date);
					}
					function updatePicker(newValue) {
						var datePicker = element.data("DateTimePicker")
						if (!newValue.isSame(datePicker.getDate())) {
							// we need to update the datepicker, but wait until the $digest cycle is finished
							$timeout(function() {
								datePicker.setDate(newValue);
							});
						}
					}
				}
			}
		}
