swagger: '2.0'
info:
  description: API used to interact with the Mabel ticketing system
  version: 1.0.0
  title: Mabel API
  contact: {}
  license:
    name: GPLv2
    url: 'http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html#SEC1'
host: 'PLACEHOLDER'
basePath: /api
consumes: []
produces:
  - application/json
schemes:
  - http
securityDefinitions:
  token:
    type: apiKey
    name: access_token
    in: query
  mabel:
    type: basic
  # raven: # Need to figure out how to implement this (normally raven requires redirect)
    # type: basic 
  admin:
    type: apiKey
    name: access_token
    in: query
  self: # NB Must only be used on operations for which the param {id} is the user id.
    type: apiKey
    name: access_token
    in: query
security:
  - token: []


paths:
  '/token':
    get:
      summary: Get an auth token using mabel credentials
      description: Login using mabel credentials and get an authorization token for use with the rest of the API. Can either use basic authorization or pass in email and password as query parameters (not recommended outside of testbed)
      security:
        - mabel: []
      parameters:
        - name: email
          in: query
          description: The email address of the user trying to log in
          type: string
          format: email
        - name: password
          in: query
          description: The password of the user trying to log in
          type: string
          format: password
      responses:
        '200':
          description: Success
          schema:
            properties:
              token:
                type: string
                example: eyJeXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoZW50aWNhdGVkIjp0cnVlLCJpZCI6MSwiZ3JvdXBzIjpbMSwyXX0.Tv5Qa0VdGZPaJFJTAY8hBPEpo6eGJFD5Yg16KQ9yzoI
                description: An authorization token for use with the rest of the API
  '/group/{id}':
    get:
      summary: Get group details
      description: Get group details. Only accessible to admins.
      security:
        - admin: []
      parameters:
        - name: id
          in: path
          minimum: 1
          description: The group ID to retrieve
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Group'
    put:
      summary: Modify a group
      description: Update the group with the given ID
      security:
        - admin: []
      parameters:
        - name: group
          in: body
          description: A specification of the group to be updated. Ommitted properties will remain unchanged.
          required: true
          schema: 
            $ref: '#/definitions/Group'
        - name: id
          in: path
          minimum: 1
          description: The group ID to modify
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Group'
    delete:
      summary: Delete a group
      description: Delete the group with the given ID
      security:
        - admin: []
      parameters:
        - name: id
          in: path
          minimum: 1
          description: The group ID to modify
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            type: object
            required:
              - name
            properties:
              success: 
                type: boolean
                default: true
  '/group':
    post:
      summary: Create a group
      description: Create a new group with an automatically selected ID
      security:
        - admin: []
      parameters:
        - name: group
          in: body
          description: "A specification of the group to be created. Note that if id is passed, it will be ignored"
          required: true
          schema: 
            # sadly using allOf means swagger UI doesn't give us the required type but validation works properly
            allOf:
              - $ref: '#/definitions/Group'
              - required:
                - name
                - description
                - ticket_limit
      responses:
        '200':
          description: Success. Returns the new group.
          schema:
            $ref: '#/definitions/Group'
  '/user/{id}':
    get:
      summary: "Get a user's details"
      description: "Get a user's details. Normal users can only get themselves, admins can get anyone."
      security:
        - self: []
        - admin: []
      parameters:
        - name: id
          in: path
          minimum: 1
          description: The user ID to retrieve
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/User'





definitions:
  Error:
    properties:
      message:
        type: string
      success:
        type: boolean
      error:
        type: object
    required:
      - message
      - success
      - error

  TicketType:
    properties:
      id: 
        type: integer
        format: int32
        example: 1
        minimum: 1
        description: Ticket type identifier
      name:
        type: string
        example: Standard
        description: Name of the ticket type
      price: 
        type: number
        format: float
        example: 130.00
        minimum: 0
        description: The price per unit for a ticket of this type
      ticket_limit: 
        type: integer
        format: int32
        example: 1
        minimum: 0
        description: The total number of tickets of this type which may be sold
      per_user_limit: 
        type: integer
        format: int32
        example: 1
        minimum: 0
        description: The number of tickets of this type that a single user may hold (may be null)
    required: 
      - id
      - name
      - price
      - ticket_limit


  User:
    required:
      - email
      - id
      - name
    properties:
      id:
        type: integer
        format: int32
        example: 1
        minimum: 1
        description: Mabel user identifier
      name:
        type: string
        example: Mabel User
        description: "User's name"
      email:
        type: string
        format: email
        example: mabel@mabelticketing.co.uk
        description: "User's email address"
      crsid:
        type: string
        example: ab123
        description: "User's CRSiD if they are a current student"
      registration_time:
        type: integer
        format: int32
        example: 14419663721
        description: 'Date the user registered (or first logged in via Raven, which counts as registration) - seconds since unix epoch'
      password_md5:
        type: string
        example: 5F4DCC3B5AA765D61D8327DEB882CF99
        description: "The MD5 hash of the user's password (will be null for raven users)"
      verification_code:
        type: string
        example: cJrE0uc4PzddPmr8AS6MBdKoQUdqYi9D
        description: The code emailed to new users when they register via mabel. They have to verify their email by returning the code to us (clicking the link in the email)
      is_verified:
        type: boolean
        example: false
        description: Whether the user is verified (i.e. allowed to buy tickets)
    description: ''

  Group:
    properties:
      id:
        type: integer
        format: int32
        example: 1
        minimum: 1
        description: Group identifier
      name:
        type: string
        example: Emmanuel Students
        description: Group name
      description:
        type: string
        example: Members who are currently students at Emmanuel College
        description: Group description
      ticket_limit:
        type: integer
        format: int32
        example: 8
        minimum: 0
        description: The number of tickets a member of this group may buy in total

  PaymentMethod:
    properties:
      id:
        type: integer
        format: int32
        example: 1
        minimum: 1
        description: Payment method identifier
      name:
        type: string
        example: College Bill
        description: Payment method name
      description:
        type: string
        example: Pay for tickets by adding the price to your end of term college bill
        description: Payment method description
      ticket_limit:
        type: integer
        format: int32
        example: 1
        minimum: 0
        description: The number of tickets which may be paid for using this payment method
    required:
      - id
      - name
      - description
      - ticket_limit

  Ticket:
    properties:
      id:
        type: integer
        format: int32
        example: 1
        minimum: 1
        description: Ticket identifier
      user_id:
        type: integer
        format: int32
        example: 1
        minimum: 1
        description: User identifier for the ticket booker
      ticket_type_id:
        type: integer
        format: int32
        example: 1
        minimum: 1
        description: Ticket type identifier for this ticket
      guest_name:
        type: string
        example: Christopher Little
        default: 'Mabel Guest'
        description: The name which should be printed on this ticket
      payment_method_id:
        type: integer
        format: int32
        example: 1
        minimum: 1
        description: Payment method identifier for this ticket
      registration_time:
        type: integer
        format: int32
        example: 14419663721
        description: Date the ticket was booked (seconds since unix epoch)
      donation:
        type: boolean
        example: true
        default: false
        description: Whether the booker chose to make a donation which this ticket
      transaction_value:
        type: number
        format: float
        example: 130.00
        minimum: 0
        description: Redundant field indicating how much this ticket cost to book
      notes:
        type: string
        example: Half of this payment has been received by cheque
        default: ""
        description: Arbitrary notes field for admins to keep track of ticket perculiarities
      status:
        type: string
        example: PENDING
        description: "An indication of the ticket's status"
        default: PENDING
        enum: 
          - PENDING
          - CONFIRMED
          - CANCELLED
          - ADMITTED
          - PENDING_WL
          - CANCELLED_WL
    required:
      - id
      - user_id
      - ticket_type_id
      - guest_name
      - payment_method_id
      - transaction_value
      - status