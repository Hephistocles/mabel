swagger: '2.0'
info:
  description: API used to interact with the Mabel ticketing system
  version: 1.0.0
  title: Mabel API
  contact: {}
  license:
    name: GPLv2
    url: 'http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html#SEC1'
host: 'PLACEHOLDER'
basePath: /api
consumes: []
produces:
  - application/json
schemes:
  - http
securityDefinitions:
  token:
    type: apiKey
    name: access_token
    in: query
  mabel:
    type: basic
  raven: # Need to figure out how to implement this (normally raven requires redirect)
    type: basic 
  admin:
    type: apiKey
    name: access_token
    in: query
  self: # NB Must only be used on operations for which the param {id} is the user id.
    type: apiKey
    name: access_token
    in: query
security: # default security is just to have an auth token
  - token: []

paths:
  /group:
    get:
      summary: Get all groups
      description: "Get all groups' details"
      security:
        - admin: []
      parameters: []
      responses:
        '200':
          description: Success. Returns details for all groups
          schema:
            items:
              $ref: '#/definitions/Group'
            type: array
    post:
      summary: Create a group
      description: "Create a new group with an automatically selected ID. Note that validation will fail if 'id' is provided."
      security:
        - admin: []
      parameters:
        - name: group
          in: body
          description: A specification of the group to be created.
          required: true
          schema:
            $merge:
              - $ref: '#/definitions/Group'
              - required:
                  - name
                  - description
                  - ticket_limit
                additionalProperties: false
                properties:
                  $exclude:
                    - id
      responses:
        '200':
          description: Success. Returns the new group.
          schema:
            $ref: '#/definitions/Group'
  '/group/{id}':
    delete:
      summary: Delete a group
      description: Delete the group with the given ID
      security:
        - admin: []
      parameters:
        - name: id
          in: path
          minimum: 1
          description: The group ID to delete
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            properties:
              success:
                default: true
                type: boolean
            required:
              - name
            type: object
    get:
      summary: Get group details
      description: Get group details. Only accessible to admins.
      security:
        - admin: []
      parameters:
        - name: id
          in: path
          minimum: 1
          description: The group ID to retrieve
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Group'
    put:
      summary: Modify a group
      description: "Update the group with the given ID. Note that the ID of the group cannot be changed."
      security:
        - admin: []
      parameters:
        - name: group
          in: body
          description: A specification of the group to be updated. Omitted properties will remain unchanged.
          required: true
          schema:
            $merge:
              - $ref: '#/definitions/Group'
              - properties:
                  $exclude:
                    - id
                additionalProperties: false
        - name: id
          in: path
          minimum: 1
          description: The group ID to modify
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Group'
  /payment-method:
    get:
      description: Get details for all payment methods available
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/PaymentMethod'
            type: array
      security:
        - token: []
      summary: Get all payment method details
  '/payment-method/{id}':
    get:
      summary: Get payment method details
      description: Get details for the given payment method
      security:
        - token: []
      parameters:
        - name: id
          in: path
          minimum: 1
          description: The payment method ID to retrieve
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PaymentMethod'
  /ticket:
    delete:
      description: Cancel a bunch of tickets at once
      parameters:
        - name: ids
          in: query
          description: A csv list of ticket IDs for tickets to be deleted.
          required: true
          type: array
          format: csv
          items:
            type: number
            format: integer
      responses:
        '200':
          description: Success
          schema:
            properties:
              success:
                default: true
                type: boolean
            type: object
      security:
        - admin: []
      summary: Cancel ticket
    get:
      summary: Get all tickets
      description: "Get all tickets' details. Warning: likely to be big currently..."
      security:
        - admin: []
      parameters: []
      responses:
        '200':
          description: Success. Returns details for all tickets
          schema:
            items:
              $ref: '#/definitions/Ticket'
            type: array
    post:
      summary: Create a ticket
      description: 'Create a new ticket with an automatically allocated ID. This operation is designed for admin usage, and ticket validation is skipped. Users should use the /user/{id}/ticket route instead.'
      security:
        - admin: []
      parameters:
        - name: ticket
          in: body
          description: A specification of the ticket to be created.
          required: true
          schema:
            $merge:
              - $ref: '#/definitions/Ticket'
              - required:
                  - user_id
                  - ticket_type_id
                  - guest_name
                  - payment_method_id
                properties:
                  $exclude:
                    - id
                    - book_time
                    - transaction_value
                additionalProperties: false
      responses:
        '200':
          description: Success. Returns the nesly created ticket
          schema:
            $ref: '#/definitions/Ticket'
  '/ticket/{id}':
    get:
      summary: Get ticket details
      description: Retrieve details for the ticket with given ID (for admins)
      security:
        - token: []
      parameters:
        - name: id
          in: path
          minimum: 1
          description: The ticket ID to retrieve
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Ticket'
    put:
      summary: Modify a ticket
      description: Update the ticket with the given ID using the details in the body
      security:
        - admin: []
      parameters:
        - name: ticket
          in: body
          description: A specification of the ticket to be updated. Omitted properties will remain unchanged.
          required: true
          schema:
            $merge:
              - $ref: '#/definitions/Ticket'
              - properties:
                  $exclude:
                    - id
                additionalProperties: false
        - name: id
          in: path
          minimum: 1
          description: The ticket ID to modify
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Ticket'
  /type:
    get:
      summary: Get all ticket types
      description: "Get all ticket types' details"
      security:
        - token: []
      parameters: []
      responses:
        '200':
          description: Success. Returns details for all ticket types
          schema:
            items:
              $ref: '#/definitions/TicketType'
            type: array
    post:
      summary: Create a ticket type
      description: Create a new ticket type with an automatically selected ID
      security:
        - admin: []
      parameters:
        - name: ticket_type
          in: body
          description: A specification of the ticket type to be created.
          required: true
          schema:
            $merge:
              - $ref: '#/definitions/TicketType'
              - properties:
                  $exclude:
                    - id
                additionalProperties: false
      responses:
        '200':
          description: Success. Returns the new ticket type.
          schema:
            $ref: '#/definitions/TicketType'
  '/type/{id}':
    delete:
      summary: Delete a ticket type
      description: Delete the ticket type with the given ID
      security:
        - token: []
      parameters:
        - name: id
          in: path
          minimum: 1
          description: The ID of the ticket type to delete
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            properties:
              success:
                default: true
                type: boolean
            required:
              - name
            type: object
    get:
      summary: Get ticket type details
      description: Get ticket type details
      security:
        - token: []
      parameters:
        - name: id
          in: path
          minimum: 1
          description: The ticket type ID to retrieve
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TicketType'
    put:
      summary: Modify a ticket type
      description: Update the ticket type with the given ID
      security:
        - token: []
      parameters:
        - name: ticket_type
          in: body
          description: "A specification of the ticket type to be updated. Omitted properties will remain unchanged. It is illegal to provide 'id' in the request body."
          required: true
          schema:
            $merge:
              - $ref: '#/definitions/TicketType'
              - properties:
                  $exclude:
                    - id
                additionalProperties: false
        - name: id
          in: path
          minimum: 1
          description: The ID of the ticket type to modify
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TicketType'
  /user:
    get:
      summary: Get all users
      description: "Get all users' details"
      security:
        - admin: []
      parameters: []
      responses:
        '200':
          description: Success. Returns details for all users
          schema:
            items:
              $ref: '#/definitions/User'
            type: array
    post:
      summary: Create a new user
      description: Create a new user with an automatically allocated ID
      security:
        - admin: []
      parameters:
        - name: user
          in: body
          description: A specification of the user to be created.
          required: true
          schema:
            $merge:
              - $ref: '#/definitions/User'
              - properties:
                  $exclude:
                    - id
                additionalProperties: false
      responses:
        '200':
          description: Success. Returns the new user.
          schema:
            $ref: '#/definitions/User'
  '/user/{id}':
    get:
      summary: "Get a user's details"
      description: "Get a user's details. Normal users can only get themselves, admins can get anyone."
      security:
        - self: []
        - admin: []
      parameters:
        - name: id
          in: path
          minimum: 1
          description: The user ID to retrieve
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/User'
    put:
      summary: Modify a user
      description: Update the user with the given ID
      security:
        - self: []
        - admin: []
      parameters:
        - name: user
          in: body
          description: "A specification of the user to be updated. Omitted properties will remain unchanged. It is illegal to provide 'id' in the request body."
          required: true
          schema:
            $merge:
              - $ref: '#/definitions/User'
              - properties:
                  $exclude:
                    - id
                additionalProperties: false
        - name: id
          in: path
          minimum: 1
          description: The ID of the user to modify
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/User'
  '/user/{id}/allowance':
    get: 
      summary: Get user allowance
      description: "Get the user's remaining allowance -- i.e. the overall number of tickets that this user is allowed to buy currently, given the groups he is a member of and the tickets he has already bought."
      security:
        - self: []
        - admin: []
      parameters:
        - name: id
          in: path
          minimum: 1
          description: The ID of the user whose allowance we wish to view
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            properties:
              allowance:
                type: integer
                format: int32
                minimum: 0
  '/user/{id}/payment-method':
    get: 
      summary: Get user payment methods
      description: "Get the user's available payment methods, taking into account the groups they are a member of. Note that this operation returns personalised ticket_limits -- i.e. taking into account the number of tickets this particular user as already bought using that payment method."
      security:
        - self: []
        - admin: []
      parameters:
        - name: id
          in: path
          minimum: 1
          description: The ID of the user whose tickets we are interested in
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/PaymentMethod'
  '/user/{id}/type':
    get:
      summary: Get available ticket types 
      description: "gets the ticket types available to the user, with ticket limit adjusted to account for already bought tickets, and also adjusted to return 0 if there's anyone in the waiting list for that ticket type."
      security:
        - self: []
        - admin: []
      parameters:
        - name: id
          in: path
          minimum: 1
          description: The ID of the user whose tickets we are interested in
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              properties:
                id:
                  type: integer
                  format: int32
                  minimum: 1
                  description: The ticket type id
                name:
                  type: string
                  description: "The name of the ticket type"
                price:
                  type: number
                  format: float 
                  description: The price of one of these tickets
                available:
                  type: integer
                  format: int32
                  description: The total number of tickets of this type remaining for sale
                  minimum: 0
                allowance: 
                  type: integer
                  format: int32
                  description: The number of tickets of this type which this user may currently purchase
                  minimum: 0
  '/user/{id}/ticket':
    get:
      summary: "Get user's tickets"
      description: "Retrieve all tickets associated with the user. This includes cancelled tickets, and waiting list tickets (and cancelled waiting list tickets)"
      security:
        - self: []
        - admin: []
      parameters:
        - name: id
          in: path
          minimum: 1
          description: The ID of the user whose tickets we are interested in
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $merge:
                - $ref: '#/definitions/Ticket'
                - properties: 
                    name: 
                      type: string
                      example: Standard
                    payment_method: 
                      type: string
                      example: College Bill
    post: 
      summary: "Book tickets"
      description: "(Attempt to) book a new list of tickets. Response body partitions successful tickets, invalid tickets, and tickets which were added to the waiting list."
      security:
        - self: []
        - admin: []
      parameters:
        - name: id
          in: path
          minimum: 1
          description: The ID of the user whose tickets we are interested in
          required: true
          type: integer
          format: int32
        - name: tickets
          in: body
          description: The list of tickets the user would like to book
          required: true
          schema:
            type: array
            items: 
              $ref: '#/definitions/BareTicket'
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              booked:
                type: array
                items:
                  $merge:
                    - $ref: '#/definitions/Ticket'
                    - properties: 
                        name: 
                          type: string
                          example: Standard
                        payment_method: 
                          type: string
                          example: College Bill
              waiting_list:
                type: array
                items: 
                  $merge:
                    - $ref: '#/definitions/Ticket'
                    - properties: 
                        name: 
                          type: string
                          example: Standard
                        payment_method: 
                          type: string
                          example: College Bill
              failed:
                type: array
                items:
                  $merge:
                    - $ref: '#/definitions/Ticket'
                    - properties: 
                        reason: 
                          type: string
                          example: "You don't have access to this payment method."
              totalPrice:
                type: number
                example: 450.97
                format: float
              payment_deadline:
                example: "Saturday, September 19th 2015"
                type: string
  '/user/{id}/ticket/{ticket_id}':
    delete:
      summary: "Cancel ticket"
      security:
        - self: []
        - admin: []
      parameters:
        - name: id
          in: path
          minimum: 1
          description: The ID of the user whose tickets we are interested in
          required: true
          type: integer
          format: int32
        - name: ticket_id
          in: path
          minimum: 1
          description: The ticket ID we're talking about
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            properties:
              success:
                default: true
                type: boolean
            required:
              - name
            type: object
    get:
      summary: "Get details for a single ticket"
      security:
        - self: []
        - admin: []
      parameters:
        - name: id
          in: path
          minimum: 1
          description: The ID of the user whose tickets we are interested in
          required: true
          type: integer
          format: int32
        - name: ticket_id
          in: path
          minimum: 1
          description: The ticket ID we're particularly talking about
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Ticket'
    put:
      summary: "Update ticket details"
      description: "Note all we can legally change this way is the guest name" # TODO: maybe also payment method?
      security:
        - self: []
        - admin: []
      parameters:
        - name: id
          in: path
          minimum: 1
          description: The ID of the user whose tickets we are interested in
          required: true
          type: integer
          format: int32
        - name: ticket_id
          in: path
          minimum: 1
          description: The ticket ID we're particularly talking about
          required: true
          type: integer
          format: int32
        - name: ticket
          in: body
          description: The updated ticket details
          required: true
          schema:
            type: object
            properties:
              guest_name: 
                type: string
                example: Christopher Little
            additionalProperties: false
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Ticket'


  /token:
    get:
      summary: Get a new auth token
      description: Trade an existing auth token for a newer one which will expire later
      parameters:
        - name: access_token
          in: query
          description: The old token we want to replace
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Token'
  /token/mabel:
    get:
      summary: Get an auth token using mabel credentials
      description: Login using mabel credentials and get an authorization token for use with the rest of the API. Can either use basic authorization or pass in email and password as query parameters (not recommended outside of testbed)
      security:
        - mabel: []
      parameters:
        - name: email
          in: query
          description: The email address of the user trying to log in
          type: string
          format: email
        - name: password
          in: query
          description: The password of the user trying to log in
          type: string
          format: password
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Token'
  /token/raven:
    get:
      summary: Get an auth token using Raven token
      description: Trade a Raven token for a mabel authorization token for use with the rest of the API.
      security:
        - raven: []
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Token'




definitions:
  Error:
    type: object
    properties:
      message:
        type: string
      success:
        type: boolean
      error:
        type: object
    required:
      - message
      - success
      - error
  TicketType:
    type: object
    properties:
      id: 
        type: integer
        format: int32
        example: 1
        minimum: 1
        description: Ticket type identifier
        readOnly: true
      name:
        type: string
        example: Standard
        description: Name of the ticket type
      price: 
        type: number
        format: float
        example: 130.00
        minimum: 0
        description: The price per unit for a ticket of this type
      ticket_limit: 
        type: integer
        format: int32
        example: 1
        minimum: 0
        description: The total number of tickets of this type which may be sold
      per_user_limit: 
        type: integer
        format: int32
        example: 1
        minimum: 0
        description: The number of tickets of this type that a single user may hold (may be null)
      groups:
        type: array
        format: csv
        items:
          type: number
          format: integer
          minimum: 0



  User:
    type: object
    properties:
      id:
        type: integer
        format: int32
        example: 1
        minimum: 1
        description: Mabel user identifier
        readOnly: true
      name:
        type: string
        example: Mabel User
        description: "User's name"
      email:
        type: string
        format: email
        example: mabel@mabelticketing.co.uk
        description: "User's email address"
      crsid:
        type: string
        example: ab123
        description: "User's CRSiD if they are a current student"
      registration_time:
        type: integer
        format: int32
        example: 14419663721
        readOnly: true
        description: 'Date the user registered (or first logged in via Raven, which counts as registration) - seconds since unix epoch'
      password_md5:
        type: string
        example: 5F4DCC3B5AA765D61D8327DEB882CF99
        description: "The MD5 hash of the user's password (will be null for raven users)"
      verification_code:
        type: string
        example: cJrE0uc4PzddPmr8AS6MBdKoQUdqYi9D
        readOnly: true
        description: The code emailed to new users when they register via mabel. They have to verify their email by returning the code to us (clicking the link in the email)
      is_verified:
        type: boolean
        example: false
        description: Whether the user is verified (i.e. allowed to buy tickets)
  Group:
    type: object
    properties:
      id:
        type: integer
        format: int32
        example: 1
        minimum: 1
        readOnly: true
        description: Group identifier
      name:
        type: string
        example: Emmanuel Students
        description: Group name
      description:
        type: string
        example: Members who are currently students at Emmanuel College
        description: Group description
      ticket_limit:
        type: integer
        format: int32
        example: 8
        minimum: 0
        description: The number of tickets a member of this group may buy in total

  PaymentMethod:
    type: object
    properties:
      id:
        type: integer
        format: int32
        example: 1
        minimum: 1
        readOnly: true
        description: Payment method identifier
      name:
        type: string
        example: College Bill
        description: Payment method name
      description:
        type: string
        example: Pay for tickets by adding the price to your end of term college bill
        description: Payment method description
      ticket_limit:
        type: integer
        format: int32
        example: 1
        minimum: 0
        description: The number of tickets which may be paid for using this payment method


  Ticket:
    type: object
    properties:
      id:
        type: integer
        format: int32
        example: 1
        minimum: 1
        readOnly: true
        description: Ticket identifier
      user_id:
        type: integer
        format: int32
        example: 1
        minimum: 1
        description: User identifier for the ticket booker
      ticket_type_id:
        type: integer
        format: int32
        example: 1
        minimum: 1
        description: Ticket type identifier for this ticket
      guest_name:
        type: string
        example: Christopher Little
        default: 'Mabel Guest'
        description: The name which should be printed on this ticket
      payment_method_id:
        type: integer
        format: int32
        example: 1
        minimum: 1
        description: Payment method identifier for this ticket
      book_time:
        type: integer
        format: int32
        example: 14419663721
        readOnly: true
        description: Date the ticket was booked (seconds since unix epoch)
      donation:
        type: boolean
        example: true
        default: false
        description: Whether the booker chose to make a donation which this ticket
      transaction_value:
        type: number
        format: float
        example: 130.99
        readOnly: true
        minimum: 0
        description: Redundant field indicating how much this ticket cost to book
      notes:
        type: string
        example: Half of this payment has been received by cheque
        default: ""
        description: Arbitrary notes field for admins to keep track of ticket perculiarities
      status:
        type: string
        example: PENDING
        description: "An indication of the ticket's status"
        default: PENDING
        enum: 
          - PENDING
          - CONFIRMED
          - CANCELLED
          - ADMITTED
          - PENDING_WL
          - CANCELLED_WL
  Token: 
    type: object
    properties:
      token:
        type: string
        # TODO: invalidate this token
        example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoIjp0cnVlLCJpZCI6MX0.lzALTSPB3iAHYBan5oBbJ23rV_NMfXKQpWCFATwaJwU
        description: An authorization token for use with the rest of the API
  BareTicket:
    $merge:
      - $ref: '#/definitions/Ticket'
      - properties:
          $exclude:
            - user_id
            - id
            - status
            - book_time
            - transaction_value
        required:
          - ticket_type_id
          - payment_method_id
          - guest_name
          - donation 
        additionalProperties: false